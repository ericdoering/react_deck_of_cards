{"ast":null,"code":"var _jsxFileName = \"/Users/ericdoering/development/Springboard/react_lights_out/src/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Board(_ref) {\n  _s();\n  let {\n    nrows,\n    ncols,\n    chanceLightStartsOn\n  } = _ref;\n  const [board, setBoard] = useState(() => createBoard());\n  console.log(hasWon(board));\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    for (let i = 0; i < nrows; i++) {\n      const rowArr = [];\n      for (let j = 0; j < ncols; j++) {\n        const isLit = Math.random() <= chanceLightStartsOn;\n        rowArr.push(isLit);\n      }\n      initialBoard.push(rowArr);\n    }\n    return initialBoard;\n  }\n  function hasWon() {\n    for (let row = 0; row < nrows; row++) {\n      for (let col = 0; col < ncols; col++) {\n        console.log(board);\n        if (board[row][col] === false) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n      const newBoard = oldBoard.map(function (arr) {\n        return arr.slice();\n      });\n\n      // TODO: in the copy, flip this cell and the cells around it\n      flipCell(y, x, newBoard);\n      flipCell(y - 1, x, newBoard);\n      flipCell(y + 1, x, newBoard);\n      flipCell(y, x - 1, newBoard);\n      flipCell(y, x + 1, newBoard);\n\n      // TODO: return the copy\n      return newBoard;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n  if (hasWon()) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"win-message\",\n      children: \"You Won!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: board.map((row, y) => {\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            className: \"cell\",\n            children: row.map((cell, x) => {\n              return /*#__PURE__*/_jsxDEV(Cell, {\n                flipCellsAroundMe: () => flipCellsAround(`${y}-${x}`),\n                isLit: board[y][x]\n              }, x, false, {\n                fileName: _jsxFileName,\n                lineNumber: 98,\n                columnNumber: 22\n              }, this);\n            })\n          }, y, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 18\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: setBoard(),\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n\n  // TODO\n\n  // make table board\n\n  // TODO\n}\n_s(Board, \"h4Sgl3kshhsPmYMOTQXf+TJdP50=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","Board","nrows","ncols","chanceLightStartsOn","board","setBoard","createBoard","console","log","hasWon","initialBoard","i","rowArr","j","isLit","Math","random","push","row","col","flipCellsAround","coord","oldBoard","y","x","split","map","Number","flipCell","boardCopy","newBoard","arr","slice","cell"],"sources":["/Users/ericdoering/development/Springboard/react_lights_out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows, ncols, chanceLightStartsOn }) {\n  const [board, setBoard] = useState(() => createBoard());\n  console.log(hasWon(board))\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    for(let i = 0; i < nrows; i++){\n      const rowArr = [];\n      for(let j = 0; j < ncols; j++){\n        const isLit = Math.random() <= chanceLightStartsOn;\n        rowArr.push(isLit);\n      }\n      initialBoard.push(rowArr);\n    }\n    return initialBoard;\n  }\n\n  function hasWon() {\n    for(let row = 0; row < nrows; row++){\n      for(let col = 0; col < ncols; col++){\n        console.log(board)\n        if(board[row][col] === false){\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      const newBoard = oldBoard.map(function(arr) {\n        return arr.slice();\n      });\n\n      // TODO: in the copy, flip this cell and the cells around it\n      flipCell(y, x, newBoard)\n      flipCell(y - 1, x, newBoard)\n      flipCell(y + 1, x, newBoard)\n      flipCell(y, x - 1, newBoard)\n      flipCell(y, x + 1, newBoard)\n\n      // TODO: return the copy\n      return newBoard;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n  if (hasWon()) {\n    return <h1 className=\"win-message\">You Won!</h1>\n  }\n  return (\n  <>\n    <table>\n      <tbody>\n        {board.map((row, y) => {\n          return <tr className=\"cell\" key={y}>\n            {row.map((cell, x) => {\n              return <Cell key={x} flipCellsAroundMe={() => flipCellsAround(`${y}-${x}`)} isLit={board[y][x]} />\n            })}\n          </tr>\n        })}\n      </tbody>\n      <button onClick={setBoard()}>Reset</button>\n    </table>\n  </>\n  )\n\n\n  // TODO\n\n  // make table board\n\n\n  // TODO\n}\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}